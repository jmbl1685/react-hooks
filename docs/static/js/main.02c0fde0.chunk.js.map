{"version":3,"sources":["AppContext.js","components/componentOne/ComponentOne.js","components/componentTwo/ComponentTwo.js","serviceWorker.js","index.js","App.js"],"names":["AppContext","createContext","ComponentOne","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useContext","useContext","state","dispatch","useEffect","concat","from","react_default","a","createElement","name","color","onSubmit","event","e","preventDefault","target","value","trim","type","handleChangeName","id","onClick","ComponentTwo","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","action","objectSpread","_useReducer2","Provider","react","ComponentOne_ComponentOne","ComponentTwo_ComponentTwo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02c0fde0.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AppContext = createContext({});","import React, { useState, useEffect, useContext } from 'react';\r\nimport { AppContext } from '../../AppContext';\r\nimport './ComponentOne.css'\r\n\r\nexport default function ComponentOne() {\r\n\r\n  let [title, setTitle] = useState(\"Component One\");\r\n\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    setTitle(`Component One ${state.from}`);\r\n  })\r\n\r\n  const handleChangeName = (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.name.value;\r\n    const NameIsValid = name.trim(\"\") === \"\" ? false : true;\r\n\r\n    if (NameIsValid) {\r\n      dispatch({\r\n        type: \"CHANGE_NAME\",\r\n        name: name,\r\n        from: \"[updated from component one]\"\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleChangeColor = () => {\r\n    dispatch({\r\n      type: \"CHANGE_COLOR\",\r\n      color: \"#E95F20\",\r\n      from: \"[updated from component one]\"\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <p>Default Name: {state.name}</p>\r\n      <p>Default Color: {state.color}</p>\r\n      <form onSubmit={(event) => handleChangeName(event)}>\r\n        <input type=\"text\" id=\"name\" name=\"name\" />\r\n        <input type=\"submit\" value=\"Change name\" />\r\n      </form>\r\n      <button onClick={() => handleChangeColor()}>Change BackgroundColor</button>\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect, useContext } from 'react';\r\nimport { AppContext } from '../../AppContext';\r\nimport './ComponentTwo.css'\r\n\r\nexport default function ComponentTwo() {\r\n\r\n  let [title, setTitle] = useState(\"Component Two\");\r\n\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    setTitle(`Component Two ${state.from}`);\r\n  })\r\n\r\n  const handleChangeName = (e) => {\r\n    e.preventDefault();\r\n    const name = e.target.name.value;\r\n    const NameIsValid = name.trim(\"\") === \"\" ? false : true;\r\n\r\n    if (NameIsValid) {\r\n      dispatch({\r\n        type: \"CHANGE_NAME\",\r\n        name: name,\r\n        from: \"[updated from component two]\"\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleChangeColor = () => {\r\n    dispatch({\r\n      type: \"CHANGE_COLOR\",\r\n      color: \"#E95F20\",\r\n      from: \"[updated from component two]\"\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <p>Default Name: {state.name}</p>\r\n      <p>Default Color: {state.color}</p>\r\n      <form onSubmit={(event) => handleChangeName(event)}>\r\n        <input type=\"text\" id=\"name\" name=\"name\" />\r\n        <input type=\"submit\" value=\"Change name\" />\r\n      </form>\r\n      <button onClick={() => handleChangeColor()}>Change BackgroundColor</button>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n","import React, { useReducer, Fragment } from 'react';\r\nimport { AppContext } from './AppContext';\r\n\r\nimport ComponentOne from './components/componentOne/ComponentOne';\r\nimport ComponentTwo from './components/componentTwo/ComponentTwo';\r\n\r\nexport default function App() {\r\n\r\n  let defaultData = {\r\n    color: \"#FFFFFF\",\r\n    name: \"Juan Manuel\",\r\n    from: \"\",\r\n  };\r\n\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n\r\n    switch (action.type) {\r\n      case \"CHANGE_NAME\":\r\n        return { ...state, name: action.name, from: action.from };\r\n      case \"CHANGE_COLOR\":\r\n        return { ...state, color: action.color, from: action.from };\r\n      default:\r\n        return {};\r\n    }\r\n\r\n  }, defaultData);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ state, dispatch }}>\r\n      <Fragment>\r\n        <ComponentOne></ComponentOne>\r\n        <ComponentTwo></ComponentTwo>\r\n      </Fragment>\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n"],"sourceRoot":""}